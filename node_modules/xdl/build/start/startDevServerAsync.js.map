{"version":3,"sources":["../../src/start/startDevServerAsync.ts"],"names":["startDevServerAsync","projectRoot","startOptions","port","metroPort","devClient","Number","process","env","RCT_METRO_PORT","ProjectSettings","setPackagerInfoAsync","expoServerPort","packagerPort","options","logger","ProjectUtils","getLogger","target","reset","resetCache","maxWorkers","server","middleware","messageSocket","use","ManifestHandler","getManifestHandler","stack","unshift","pop"],"mappings":";;;;;;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAqBO,eAAeA,mBAAf,CAAmCC,WAAnC,EAAwDC,YAAxD,EAAoF;AACzF,0CAAuBD,WAAvB;AAEA,MAAIE,IAAJ;;AAEA,MAAID,YAAY,CAACE,SAAb,IAA0B,IAA9B,EAAoC;AAClC;AACAD,IAAAA,IAAI,GAAGD,YAAY,CAACE,SAApB;AACD,GAHD,MAGO;AACLD,IAAAA,IAAI,GAAGD,YAAY,CAACG,SAAb,GACHC,MAAM,CAACC,OAAO,CAACC,GAAR,CAAYC,cAAb,CAAN,IAAsC,IADnC,GAEH,MAAM,kCAAiB,KAAjB,CAFV;AAGD;;AACD,QAAMC,4BAAgBC,oBAAhB,CAAqCV,WAArC,EAAkD;AACtDW,IAAAA,cAAc,EAAET,IADsC;AAEtDU,IAAAA,YAAY,EAAEV;AAFwC,GAAlD,CAAN;AAKA,QAAMW,OAA8B,GAAG;AACrCX,IAAAA,IADqC;AAErCY,IAAAA,MAAM,EAAEC,yBAAaC,SAAb,CAAuBhB,WAAvB,CAF6B;AAGrC;AACAiB,IAAAA,MAAM,EAAEhB,YAAY,CAACgB;AAJgB,GAAvC;;AAMA,MAAIhB,YAAY,CAACiB,KAAjB,EAAwB;AACtBL,IAAAA,OAAO,CAACM,UAAR,GAAqB,IAArB;AACD;;AACD,MAAIlB,YAAY,CAACmB,UAAb,IAA2B,IAA/B,EAAqC;AACnCP,IAAAA,OAAO,CAACO,UAAR,GAAqBnB,YAAY,CAACmB,UAAlC;AACD;;AAED,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,UAAV;AAAsBC,IAAAA;AAAtB,MAAwC,MAAM,yCAAuBvB,WAAvB,EAAoCa,OAApC,CAApD;AACAS,EAAAA,UAAU,CAACE,GAAX,CAAeC,4BAAgBC,kBAAhB,CAAmC1B,WAAnC,CAAf,EAhCyF,CAkCzF;AACA;AACA;AACA;AACA;AACA;;AACAsB,EAAAA,UAAU,CAACK,KAAX,CAAiBC,OAAjB,CAAyBN,UAAU,CAACK,KAAX,CAAiBE,GAAjB,EAAzB;AAEA,SAAO,CAACR,MAAD,EAASC,UAAT,EAAqBC,aAArB,CAAP;AACD","sourcesContent":["import { ProjectTarget } from '@expo/config';\nimport { MetroDevServerOptions, runMetroDevServerAsync } from '@expo/dev-server';\n\nimport {\n  assertValidProjectRoot,\n  getFreePortAsync,\n  ManifestHandler,\n  ProjectSettings,\n  ProjectUtils,\n} from '../internal';\n\nexport type StartOptions = {\n  metroPort?: number;\n  isWebSocketsEnabled?: boolean;\n  isRemoteReloadingEnabled?: boolean;\n  devClient?: boolean;\n  reset?: boolean;\n  nonInteractive?: boolean;\n  nonPersistent?: boolean;\n  maxWorkers?: number;\n  webOnly?: boolean;\n  target?: ProjectTarget;\n};\n\nexport async function startDevServerAsync(projectRoot: string, startOptions: StartOptions) {\n  assertValidProjectRoot(projectRoot);\n\n  let port: number;\n\n  if (startOptions.metroPort != null) {\n    // If the manually defined port is busy then an error should be thrown\n    port = startOptions.metroPort;\n  } else {\n    port = startOptions.devClient\n      ? Number(process.env.RCT_METRO_PORT) || 8081\n      : await getFreePortAsync(19000);\n  }\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    expoServerPort: port,\n    packagerPort: port,\n  });\n\n  const options: MetroDevServerOptions = {\n    port,\n    logger: ProjectUtils.getLogger(projectRoot),\n    // @deprecated\n    target: startOptions.target,\n  };\n  if (startOptions.reset) {\n    options.resetCache = true;\n  }\n  if (startOptions.maxWorkers != null) {\n    options.maxWorkers = startOptions.maxWorkers;\n  }\n\n  const { server, middleware, messageSocket } = await runMetroDevServerAsync(projectRoot, options);\n  middleware.use(ManifestHandler.getManifestHandler(projectRoot));\n\n  // We need the manifest handler to be the first middleware to run so our\n  // routes take precedence over static files. For example, the manifest is\n  // served from '/' and if the user has an index.html file in their project\n  // then the manifest handler will never run, the static middleware will run\n  // and serve index.html instead of the manifest.\n  // https://github.com/expo/expo/issues/13114\n  middleware.stack.unshift(middleware.stack.pop());\n\n  return [server, middleware, messageSocket];\n}\n"],"file":"startDevServerAsync.js"}