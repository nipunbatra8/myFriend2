{"version":3,"sources":["../../src/start/ManifestHandler.ts"],"names":["_cachedSignedManifest","manifestString","signedManifest","blacklistedEnvironmentVariables","Set","shouldExposeEnvironmentVariableInManifest","key","has","toUpperCase","startsWith","stripPort","host","URL","hostname","getPackagerOptionsAsync","projectRoot","projectSettings","ProjectSettings","readAsync","bundleUrlPackagerOpts","JSON","parse","stringify","urlType","hostType","getBundleUrlAsync","platform","mainModuleName","queryParams","UrlUtils","constructBundleQueryParams","path","encodeURI","encodeURIComponent","constructBundleUrlAsync","getPlatformFromRequest","headers","toString","getManifestHandler","req","res","next","url","includes","Doctor","validateWithNetworkAsync","catch","error","ProjectUtils","logError","exp","hostInfo","getManifestResponseFromHeadersAsync","sdkVersion","setHeader","end","Analytics","logEvent","developerTool","Config","e","stack","statusCode","acceptSignature","getManifestResponseAsync","projectConfig","manifest","entryPoint","stripJSExtension","createHostInfoAsync","developer","tool","packagerOpts","Versions","lteSdkVersion","env","getManifestEnvironment","bundleUrl","debuggerHost","constructDebuggerHostAsync","logUrl","constructLogUrlAsync","hostUri","constructHostUriAsync","ProjectAssets","resolveManifestAssets","resolver","match","resolveGoogleServicesFile","getManifestStringAsync","code","owner","addSigningDisabledWarning","chalk","bold","ConnectionStatus","setIsOffline","seen","reason","logWarning","Object","keys","process","reduce","prev","hostUUID","currentSession","UserManager","getSessionAsync","isOffline","id","ANONYMOUS_USERNAME","slug","getUnsignedManifestString","getSignedManifestStringAsync","UserSettings","getAnonymousIdentifierAsync","server","serverVersion","require","version","serverDriver","serverOS","os","serverOSVersion","release","user","ensureLoggedInAsync","response","ApiV2","clientForUser","postAsync","args","remoteUsername","getCurrentUsernameAsync","remotePackageName","unsignedManifest","signature"],"mappings":"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","sourcesContent":["import { ExpoAppManifest, ExpoConfig, getConfig } from '@expo/config';\nimport { JSONObject } from '@expo/json-file';\nimport chalk from 'chalk';\nimport express from 'express';\nimport http from 'http';\nimport os from 'os';\nimport { URL } from 'url';\n\nimport {\n  Analytics,\n  ANONYMOUS_USERNAME,\n  ApiV2,\n  Config,\n  ConnectionStatus,\n  Doctor,\n  learnMore,\n  ProjectAssets,\n  ProjectSettings,\n  ProjectUtils,\n  resolveEntryPoint,\n  UrlUtils,\n  UserManager,\n  UserSettings,\n  Versions,\n} from '../internal';\n\ninterface HostInfo {\n  host: string;\n  server: 'xdl';\n  serverVersion: string;\n  serverDriver: string | null;\n  serverOS: NodeJS.Platform;\n  serverOSVersion: string;\n}\n\ntype PackagerOptions = ProjectSettings.ProjectSettings;\n\ntype CachedSignedManifest =\n  | {\n      manifestString: null;\n      signedManifest: null;\n    }\n  | {\n      manifestString: string;\n      signedManifest: string;\n    };\n\nconst _cachedSignedManifest: CachedSignedManifest = {\n  manifestString: null,\n  signedManifest: null,\n};\n\nconst blacklistedEnvironmentVariables = new Set([\n  'EXPO_APPLE_PASSWORD',\n  'EXPO_ANDROID_KEY_PASSWORD',\n  'EXPO_ANDROID_KEYSTORE_PASSWORD',\n  'EXPO_IOS_DIST_P12_PASSWORD',\n  'EXPO_IOS_PUSH_P12_PASSWORD',\n  'EXPO_CLI_PASSWORD',\n]);\n\nfunction shouldExposeEnvironmentVariableInManifest(key: string) {\n  if (blacklistedEnvironmentVariables.has(key.toUpperCase())) {\n    return false;\n  }\n  return key.startsWith('REACT_NATIVE_') || key.startsWith('EXPO_');\n}\n\nfunction stripPort(host: string | undefined): string | undefined {\n  if (!host) {\n    return host;\n  }\n  return new URL('/', `http://${host}`).hostname;\n}\n\nasync function getPackagerOptionsAsync(\n  projectRoot: string\n): Promise<[PackagerOptions, PackagerOptions]> {\n  // Get packager opts and then copy into bundleUrlPackagerOpts\n  const projectSettings = await ProjectSettings.readAsync(projectRoot);\n  const bundleUrlPackagerOpts = JSON.parse(JSON.stringify(projectSettings));\n  bundleUrlPackagerOpts.urlType = 'http';\n  if (bundleUrlPackagerOpts.hostType === 'redirect') {\n    bundleUrlPackagerOpts.hostType = 'tunnel';\n  }\n  return [projectSettings, bundleUrlPackagerOpts];\n}\n\nasync function getBundleUrlAsync({\n  projectRoot,\n  platform,\n  projectSettings,\n  bundleUrlPackagerOpts,\n  mainModuleName,\n  hostname,\n}: {\n  platform: string;\n  hostname?: string;\n  mainModuleName: string;\n  projectRoot: string;\n  projectSettings: PackagerOptions;\n  bundleUrlPackagerOpts: PackagerOptions;\n}): Promise<string> {\n  const queryParams = UrlUtils.constructBundleQueryParams(projectRoot, projectSettings);\n\n  const path = `/${encodeURI(mainModuleName)}.bundle?platform=${encodeURIComponent(\n    platform\n  )}&${queryParams}`;\n\n  return (\n    (await UrlUtils.constructBundleUrlAsync(projectRoot, bundleUrlPackagerOpts, hostname)) + path\n  );\n}\n\nfunction getPlatformFromRequest(headers: http.IncomingHttpHeaders): string {\n  return (headers['exponent-platform'] || 'ios').toString();\n}\n\nexport function getManifestHandler(projectRoot: string) {\n  return async (\n    req: express.Request | http.IncomingMessage,\n    res: express.Response | http.ServerResponse,\n    next: (err?: Error) => void\n  ) => {\n    // Only support `/`, `/manifest`, `/index.exp` for the manifest middleware.\n    if (!req.url || !['/', '/manifest', '/index.exp'].includes(req.url)) {\n      next();\n      return;\n    }\n\n    try {\n      // We intentionally don't `await`. We want to continue trying even\n      // if there is a potential error in the package.json and don't want to slow\n      // down the request\n      Doctor.validateWithNetworkAsync(projectRoot).catch(error => {\n        ProjectUtils.logError(\n          projectRoot,\n          'expo',\n          `Error: could not load config json at ${projectRoot}: ${error.toString()}`,\n          'doctor-config-json-not-read'\n        );\n      });\n\n      const { manifestString, exp, hostInfo } = await getManifestResponseFromHeadersAsync({\n        projectRoot,\n        headers: req.headers,\n      });\n      const sdkVersion = exp.sdkVersion ?? null;\n\n      // Send the response\n      res.setHeader('Exponent-Server', JSON.stringify(hostInfo));\n      // End the request\n      res.end(manifestString);\n\n      // Log analytics\n      Analytics.logEvent('Serve Manifest', {\n        projectRoot,\n        developerTool: Config.developerTool,\n        sdkVersion,\n      });\n    } catch (e) {\n      ProjectUtils.logError(projectRoot, 'expo', e.stack);\n      // 5xx = Server Error HTTP code\n      res.statusCode = 520;\n      res.end(\n        JSON.stringify({\n          error: e.toString(),\n        })\n      );\n    }\n  };\n}\n\nasync function getManifestResponseFromHeadersAsync({\n  projectRoot,\n  headers,\n}: {\n  projectRoot: string;\n  headers: http.IncomingHttpHeaders;\n}): Promise<{ exp: ExpoConfig; manifestString: string; hostInfo: HostInfo }> {\n  // Read from headers\n  const platform = getPlatformFromRequest(headers);\n  const acceptSignature = headers['exponent-accept-signature'];\n  return getManifestResponseAsync({ projectRoot, host: headers.host, platform, acceptSignature });\n}\n\nexport async function getManifestResponseAsync({\n  projectRoot,\n  host,\n  platform,\n  acceptSignature,\n}: {\n  projectRoot: string;\n  platform: string;\n  host?: string;\n  acceptSignature?: string | string[];\n}): Promise<{ exp: ExpoConfig; manifestString: string; hostInfo: HostInfo }> {\n  // Read the config\n  const projectConfig = getConfig(projectRoot);\n  const manifest = projectConfig.exp as ExpoAppManifest;\n  // Read from headers\n  const hostname = stripPort(host);\n\n  // Get project entry point and initial module\n  const entryPoint = resolveEntryPoint(projectRoot, platform, projectConfig);\n  const mainModuleName = UrlUtils.stripJSExtension(entryPoint);\n  // Gather packager and host info\n  const hostInfo = await createHostInfoAsync();\n  const [projectSettings, bundleUrlPackagerOpts] = await getPackagerOptionsAsync(projectRoot);\n  // Mutate the manifest\n  manifest.developer = {\n    tool: Config.developerTool,\n    projectRoot,\n  };\n  manifest.packagerOpts = projectSettings;\n  manifest.mainModuleName = mainModuleName;\n  // Adding the env variables to the Expo manifest is unsafe.\n  // This feature is deprecated in SDK 41 forward.\n  if (manifest.sdkVersion && Versions.lteSdkVersion(manifest, '40.0.0')) {\n    manifest.env = getManifestEnvironment();\n  }\n  // Add URLs to the manifest\n  manifest.bundleUrl = await getBundleUrlAsync({\n    projectRoot,\n    platform,\n    projectSettings,\n    bundleUrlPackagerOpts,\n    mainModuleName,\n    hostname,\n  });\n  manifest.debuggerHost = await UrlUtils.constructDebuggerHostAsync(projectRoot, hostname);\n  manifest.logUrl = await UrlUtils.constructLogUrlAsync(projectRoot, hostname);\n  manifest.hostUri = await UrlUtils.constructHostUriAsync(projectRoot, hostname);\n  // Resolve all assets and set them on the manifest as URLs\n  await ProjectAssets.resolveManifestAssets({\n    projectRoot,\n    manifest: manifest as ExpoAppManifest,\n    async resolver(path) {\n      return manifest.bundleUrl!.match(/^https?:\\/\\/.*?\\//)![0] + 'assets/' + path;\n    },\n  });\n  // The server normally inserts this but if we're offline we'll do it here\n  await ProjectAssets.resolveGoogleServicesFile(projectRoot, manifest);\n\n  // Create the final string\n  let manifestString;\n  try {\n    manifestString = await getManifestStringAsync(manifest, hostInfo.host, acceptSignature);\n  } catch (error) {\n    if (error.code === 'UNAUTHORIZED_ERROR' && manifest.owner) {\n      // Don't have permissions for siging, warn and enable offline mode.\n      addSigningDisabledWarning(\n        projectRoot,\n        `This project belongs to ${chalk.bold(\n          `@${manifest.owner}`\n        )} and you have not been granted the appropriate permissions.\\n` +\n          `Please request access from an admin of @${manifest.owner} or change the \"owner\" field to an account you belong to.\\n` +\n          learnMore('https://docs.expo.io/versions/latest/config/app/#owner')\n      );\n      ConnectionStatus.setIsOffline(true);\n      manifestString = await getManifestStringAsync(manifest, hostInfo.host, acceptSignature);\n    } else if (error.code === 'ENOTFOUND') {\n      // Got a DNS error, i.e. can't access exp.host, warn and enable offline mode.\n      addSigningDisabledWarning(\n        projectRoot,\n        `Could not reach Expo servers, please check if you can access ${\n          error.hostname || 'exp.host'\n        }.`\n      );\n      ConnectionStatus.setIsOffline(true);\n      manifestString = await getManifestStringAsync(manifest, hostInfo.host, acceptSignature);\n    } else {\n      throw error;\n    }\n  }\n\n  return {\n    manifestString,\n    exp: manifest,\n    hostInfo,\n  };\n}\n\nconst addSigningDisabledWarning = (() => {\n  let seen = false;\n  return (projectRoot: string, reason: string) => {\n    if (!seen) {\n      seen = true;\n      ProjectUtils.logWarning(\n        projectRoot,\n        'expo',\n        `${reason}\\nFalling back to offline mode.`,\n        'signing-disabled'\n      );\n    }\n  };\n})();\n\nfunction getManifestEnvironment(): Record<string, any> {\n  return Object.keys(process.env).reduce<Record<string, any>>((prev, key) => {\n    if (shouldExposeEnvironmentVariableInManifest(key)) {\n      prev[key] = process.env[key];\n    }\n    return prev;\n  }, {});\n}\n\nasync function getManifestStringAsync(\n  manifest: ExpoAppManifest,\n  hostUUID: string,\n  acceptSignature?: string | string[]\n): Promise<string> {\n  const currentSession = await UserManager.getSessionAsync();\n  if (!currentSession || ConnectionStatus.isOffline()) {\n    manifest.id = `@${ANONYMOUS_USERNAME}/${manifest.slug}-${hostUUID}`;\n  }\n  if (!acceptSignature) {\n    return JSON.stringify(manifest);\n  } else if (!currentSession || ConnectionStatus.isOffline()) {\n    return getUnsignedManifestString(manifest);\n  } else {\n    return await getSignedManifestStringAsync(manifest, currentSession);\n  }\n}\n\nasync function createHostInfoAsync(): Promise<HostInfo> {\n  const host = await UserSettings.getAnonymousIdentifierAsync();\n\n  return {\n    host,\n    server: 'xdl',\n    serverVersion: require('xdl/package.json').version,\n    serverDriver: Config.developerTool,\n    serverOS: os.platform(),\n    serverOSVersion: os.release(),\n  };\n}\n\nexport async function getSignedManifestStringAsync(\n  manifest: Partial<ExpoAppManifest>,\n  // NOTE: we currently ignore the currentSession that is passed in, see the note below about analytics.\n  currentSession: { sessionSecret?: string; accessToken?: string }\n) {\n  const manifestString = JSON.stringify(manifest);\n  if (_cachedSignedManifest.manifestString === manifestString) {\n    return _cachedSignedManifest.signedManifest;\n  }\n  // WARNING: Removing the following line will regress analytics, see: https://github.com/expo/expo-cli/pull/2357\n  // TODO: make this more obvious from code\n  const user = await UserManager.ensureLoggedInAsync();\n  const { response } = await ApiV2.clientForUser(user).postAsync('manifest/sign', {\n    args: {\n      remoteUsername: manifest.owner ?? (await UserManager.getCurrentUsernameAsync()),\n      remotePackageName: manifest.slug,\n    },\n    manifest: manifest as JSONObject,\n  });\n  _cachedSignedManifest.manifestString = manifestString;\n  _cachedSignedManifest.signedManifest = response;\n  return response;\n}\n\nexport function getUnsignedManifestString(manifest: ExpoConfig) {\n  const unsignedManifest = {\n    manifestString: JSON.stringify(manifest),\n    signature: 'UNSIGNED',\n  };\n  return JSON.stringify(unsignedManifest);\n}\n"],"file":"ManifestHandler.js"}