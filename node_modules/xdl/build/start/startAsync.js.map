{"version":3,"sources":["../../src/start/startAsync.ts"],"names":["serverInstance","messageSocket","broadcastMessage","method","params","broadcast","startAsync","projectRoot","exp","options","verbose","Analytics","logEvent","developerTool","Config","sdkVersion","webOnly","Webpack","restartAsync","DevSession","startSession","Env","shouldUseDevServer","devClient","hostType","ProjectSettings","readAsync","ConnectionStatus","isOffline","e","ProjectUtils","logDebug","message","stopInternalAsync","stopSession","Promise","all","stopAsync","resolve","reject","close","error","Android","maybeStopAdbDaemonAsync","forceQuitAsync","packagerPid","ngrokPid","readPackagerInfoAsync","process","kill","setPackagerInfoAsync","expoServerPort","packagerPort","expoServerNgrokUrl","packagerNgrokUrl","webpackServerPort","result","race","setTimeout"],"mappings":"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","sourcesContent":["import { ExpoConfig, getConfig } from '@expo/config';\nimport { Server } from 'http';\n\nimport {\n  Analytics,\n  Android,\n  assertValidProjectRoot,\n  Config,\n  ConnectionStatus,\n  DevSession,\n  Env,\n  ProjectSettings,\n  ProjectUtils,\n  startDevServerAsync,\n  StartDevServerOptions,\n  startExpoServerAsync,\n  startReactNativeServerAsync,\n  startTunnelsAsync,\n  stopExpoServerAsync,\n  stopReactNativeServerAsync,\n  stopTunnelsAsync,\n  Webpack,\n} from '../internal';\n\nlet serverInstance: Server | null = null;\nlet messageSocket: any | null = null;\n\n/**\n * Sends a message over web sockets to any connected device,\n * does nothing when the dev server is not running.\n *\n * @param method name of the command. In RN projects `reload`, and `devMenu` are available. In Expo Go, `sendDevCommand` is available.\n * @param params\n */\nexport function broadcastMessage(\n  method: 'reload' | 'devMenu' | 'sendDevCommand',\n  params?: Record<string, any> | undefined\n) {\n  if (messageSocket) {\n    messageSocket.broadcast(method, params);\n  }\n}\n\nexport async function startAsync(\n  projectRoot: string,\n  {\n    exp = getConfig(projectRoot).exp,\n    ...options\n  }: StartDevServerOptions & { exp?: ExpoConfig } = {},\n  verbose: boolean = true\n): Promise<ExpoConfig> {\n  assertValidProjectRoot(projectRoot);\n\n  Analytics.logEvent('Start Project', {\n    projectRoot,\n    developerTool: Config.developerTool,\n    sdkVersion: exp.sdkVersion ?? null,\n  });\n\n  if (options.webOnly) {\n    await Webpack.restartAsync(projectRoot, options);\n    DevSession.startSession(projectRoot, exp, 'web');\n    return exp;\n  } else if (Env.shouldUseDevServer(exp) || options.devClient) {\n    [serverInstance, , messageSocket] = await startDevServerAsync(projectRoot, options);\n    DevSession.startSession(projectRoot, exp, 'native');\n  } else {\n    await startExpoServerAsync(projectRoot);\n    await startReactNativeServerAsync({ projectRoot, exp, options, verbose });\n    DevSession.startSession(projectRoot, exp, 'native');\n  }\n\n  const { hostType } = await ProjectSettings.readAsync(projectRoot);\n\n  if (!ConnectionStatus.isOffline() && hostType === 'tunnel') {\n    try {\n      await startTunnelsAsync(projectRoot);\n    } catch (e) {\n      ProjectUtils.logDebug(projectRoot, 'expo', `Error starting tunnel ${e.message}`);\n    }\n  }\n  return exp;\n}\n\nasync function stopInternalAsync(projectRoot: string): Promise<void> {\n  DevSession.stopSession();\n\n  await Promise.all([\n    Webpack.stopAsync(projectRoot),\n    new Promise<void>((resolve, reject) => {\n      if (serverInstance) {\n        serverInstance.close(error => {\n          if (error) {\n            reject(error);\n          } else {\n            resolve();\n          }\n        });\n      }\n    }),\n    stopExpoServerAsync(projectRoot),\n    stopReactNativeServerAsync(projectRoot),\n    async () => {\n      if (!ConnectionStatus.isOffline()) {\n        try {\n          await stopTunnelsAsync(projectRoot);\n        } catch (e) {\n          ProjectUtils.logDebug(projectRoot, 'expo', `Error stopping ngrok ${e.message}`);\n        }\n      }\n    },\n    await Android.maybeStopAdbDaemonAsync(),\n  ]);\n}\n\nasync function forceQuitAsync(projectRoot: string) {\n  // find RN packager and ngrok pids, attempt to kill them manually\n  const { packagerPid, ngrokPid } = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n  if (packagerPid) {\n    try {\n      process.kill(packagerPid);\n    } catch (e) {}\n  }\n  if (ngrokPid) {\n    try {\n      process.kill(ngrokPid);\n    } catch (e) {}\n  }\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    expoServerPort: null,\n    packagerPort: null,\n    packagerPid: null,\n    expoServerNgrokUrl: null,\n    packagerNgrokUrl: null,\n    ngrokPid: null,\n    webpackServerPort: null,\n  });\n}\n\nexport async function stopAsync(projectRoot: string): Promise<void> {\n  try {\n    const result = await Promise.race([\n      stopInternalAsync(projectRoot),\n      new Promise(resolve => setTimeout(resolve, 2000, 'stopFailed')),\n    ]);\n    if (result === 'stopFailed') {\n      await forceQuitAsync(projectRoot);\n    }\n  } catch (error) {\n    await forceQuitAsync(projectRoot);\n    throw error;\n  }\n}\n"],"file":"startAsync.js"}