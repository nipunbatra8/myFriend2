{"version":3,"sources":["../../src/utils/choosePortAsync.ts"],"names":["choosePortAsync","projectRoot","defaultPort","host","port","hostnames","isRestricted","process","platform","message","chalk","bold","runningProcess","pidTag","gray","pid","directory","cyan","command","Logger","global","info","change","initial","error","code","warn"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAEO,eAAeA,eAAf,CACLC,WADK,EAELC,WAFK,EAGLC,IAHK,EAImB;AACxB,MAAI;AACF,UAAMC,IAAI,GAAG,MAAM,8BAAcF,WAAd,EAA2B;AAAEG,MAAAA,SAAS,EAAE,CAACF,IAAD,aAACA,IAAD,cAACA,IAAD,GAAS,IAAT;AAAb,KAA3B,CAAnB;;AACA,QAAIC,IAAI,KAAKF,WAAb,EAA0B;AACxB,aAAOE,IAAP;AACD;;AAED,UAAME,YAAY,GAAGC,OAAO,CAACC,QAAR,KAAqB,OAArB,IAAgCN,WAAW,GAAG,IAA9C,IAAsD,CAAC,wBAA5E;AAEA,QAAIO,OAAO,GAAGH,YAAY,GACrB,qEADqB,GAErB,QAAOI,iBAAMC,IAAN,CAAWT,WAAX,CAAwB,KAFpC;AAIA,UAAMU,cAAc,GAAGN,YAAY,GAAG,IAAH,GAAU,4CAAkBJ,WAAlB,CAA7C;;AAEA,QAAIU,cAAJ,EAAoB;AAClB,YAAMC,MAAM,GAAGH,iBAAMI,IAAN,CAAY,QAAOF,cAAc,CAACG,GAAI,GAAtC,CAAf;;AACA,UAAIH,cAAc,CAACI,SAAf,KAA6Bf,WAAjC,EAA8C;AAC5CQ,QAAAA,OAAO,IAAK,qCAAZ;AACD,OAFD,MAEO;AACLA,QAAAA,OAAO,IAAK,YAAWC,iBAAMO,IAAN,CAAWL,cAAc,CAACM,OAA1B,CAAmC,oBAA1D;AACD;;AACDT,MAAAA,OAAO,IAAI,OAAOC,iBAAMI,IAAN,CAAY,KAAIF,cAAc,CAACI,SAAU,IAAGH,MAAO,EAAnD,CAAlB;AACD;;AAEDM,sBAAOC,MAAP,CAAcC,IAAd,CAAoB,UAASZ,OAAQ,EAArC;;AACA,UAAMa,MAAM,GAAG,MAAM,6BAAa;AAChCb,MAAAA,OAAO,EAAG,YAAWL,IAAK,WADM;AAEhCmB,MAAAA,OAAO,EAAE;AAFuB,KAAb,CAArB;AAIA,WAAOD,MAAM,GAAGlB,IAAH,GAAU,IAAvB;AACD,GA9BD,CA8BE,OAAOoB,KAAP,EAAc;AACd,QAAIA,KAAK,CAACC,IAAN,KAAe,SAAnB,EAA8B;AAC5B,YAAMD,KAAN;AACD,KAFD,MAEO,IAAIA,KAAK,CAACC,IAAN,KAAe,iBAAnB,EAAsC;AAC3CN,wBAAOC,MAAP,CAAcM,IAAd,CAAmBF,KAAK,CAACf,OAAzB;;AACA,aAAO,IAAP;AACD;;AACD,UAAMe,KAAN;AACD;AACF","sourcesContent":["import chalk from 'chalk';\nimport freeportAsync from 'freeport-async';\nimport isRoot from 'is-root';\n\nimport Logger from '../Logger';\nimport { confirmAsync } from '../Prompts';\nimport { getRunningProcess } from './getRunningProcess';\n\nexport async function choosePortAsync(\n  projectRoot: string,\n  defaultPort: number,\n  host?: string\n): Promise<number | null> {\n  try {\n    const port = await freeportAsync(defaultPort, { hostnames: [host ?? null] });\n    if (port === defaultPort) {\n      return port;\n    }\n\n    const isRestricted = process.platform !== 'win32' && defaultPort < 1024 && !isRoot();\n\n    let message = isRestricted\n      ? `Admin permissions are required to run a server on a port below 1024`\n      : `Port ${chalk.bold(defaultPort)} is`;\n\n    const runningProcess = isRestricted ? null : getRunningProcess(defaultPort);\n\n    if (runningProcess) {\n      const pidTag = chalk.gray(`(pid ${runningProcess.pid})`);\n      if (runningProcess.directory === projectRoot) {\n        message += ` running this app in another window`;\n      } else {\n        message += ` running ${chalk.cyan(runningProcess.command)} in another window`;\n      }\n      message += '\\n' + chalk.gray(`  ${runningProcess.directory} ${pidTag}`);\n    }\n\n    Logger.global.info(`\\u203A ${message}`);\n    const change = await confirmAsync({\n      message: `Use port ${port} instead?`,\n      initial: true,\n    });\n    return change ? port : null;\n  } catch (error) {\n    if (error.code === 'ABORTED') {\n      throw error;\n    } else if (error.code === 'NON_INTERACTIVE') {\n      Logger.global.warn(error.message);\n      return null;\n    }\n    throw error;\n  }\n}\n"],"file":"choosePortAsync.js"}