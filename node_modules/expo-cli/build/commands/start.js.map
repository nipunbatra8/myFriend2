{"version":3,"sources":["../../src/commands/start.ts"],"names":["action","projectRoot","options","Log","log","chalk","gray","hasExpoInstalled","resolveFrom","silent","ConfigError","exp","pkg","getConfig","skipSDKVersionRequirement","webOnly","devClient","track","urlOpts","optsAsync","rootPath","path","resolve","tryOpeningDevToolsAsync","Versions","gteSdkVersion","ensureTypeScriptSetupAsync","validateDependenciesVersionsAsync","assertProjectHasExpoExtensionFilesAsync","startOptions","parseStartOptions","Project","startAsync","url","UrlUtils","constructDeepLinkAsync","recipient","sendTo","getRecipient","sendUrlAsync","handleMobileOptsAsync","isTerminalUIEnabled","nonInteractive","isDetached","TerminalUI","newLine","printQRCode","underline","nested","dim","UnifiedAnalytics","logEvent","status","platform","flush","program","command","alias","description","helpGroup","option","allowOffline","asyncActionProjectDir","normalizedOptions"],"mappings":"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","sourcesContent":["import { ConfigError, ExpoConfig, getConfig, isLegacyImportsEnabled } from '@expo/config';\nimport chalk from 'chalk';\nimport path from 'path';\nimport resolveFrom from 'resolve-from';\nimport { Project, UnifiedAnalytics, UrlUtils, Versions } from 'xdl';\n\nimport getDevClientProperties from '../analytics/getDevClientProperties';\nimport Log from '../log';\nimport * as sendTo from '../sendTo';\nimport urlOpts from '../urlOpts';\nimport * as TerminalUI from './start/TerminalUI';\nimport { installCustomExitHook, installExitHooks } from './start/installExitHooks';\nimport { tryOpeningDevToolsAsync } from './start/openDevTools';\nimport {\n  NormalizedOptions,\n  normalizeOptionsAsync,\n  parseStartOptions,\n  RawStartOptions,\n} from './start/parseStartOptions';\nimport { assertProjectHasExpoExtensionFilesAsync } from './utils/deprecatedExtensionWarnings';\nimport { profileMethod } from './utils/profileMethod';\nimport { ensureTypeScriptSetupAsync } from './utils/typescript/ensureTypeScriptSetup';\nimport { validateDependenciesVersionsAsync } from './utils/validateDependenciesVersions';\n\nasync function action(projectRoot: string, options: NormalizedOptions): Promise<void> {\n  Log.log(chalk.gray(`Starting project at ${projectRoot}`));\n\n  // Add clean up hooks\n  installExitHooks(projectRoot);\n\n  // Find expo binary in project/workspace node_modules\n  const hasExpoInstalled = resolveFrom.silent(projectRoot, 'expo');\n\n  if (!hasExpoInstalled) {\n    throw new ConfigError(\n      `Unable to find expo in this project - have you run yarn / npm install yet?`,\n      'MODULE_NOT_FOUND'\n    );\n  }\n\n  const { exp, pkg } = profileMethod(getConfig)(projectRoot, {\n    skipSDKVersionRequirement: options.webOnly,\n  });\n\n  if (options.devClient) {\n    track(projectRoot, exp);\n  }\n\n  // Assert various random things\n  // TODO: split up this method\n  await profileMethod(urlOpts.optsAsync)(projectRoot, options);\n\n  // TODO: This is useless on mac, check if useless on win32\n  const rootPath = path.resolve(projectRoot);\n\n  // Optionally open the developer tools UI.\n  await profileMethod(tryOpeningDevToolsAsync)(rootPath, {\n    exp,\n    options,\n  });\n\n  if (Versions.gteSdkVersion(exp, '34.0.0')) {\n    await profileMethod(ensureTypeScriptSetupAsync)(projectRoot);\n  }\n\n  if (!options.webOnly) {\n    // TODO: only validate dependencies if starting in managed workflow\n    await profileMethod(validateDependenciesVersionsAsync)(projectRoot, exp, pkg);\n    // Warn about expo extensions.\n    if (!isLegacyImportsEnabled(exp)) {\n      // Adds a few seconds in basic projects so we should\n      // drop this in favor of the upgrade version as soon as possible.\n      await profileMethod(assertProjectHasExpoExtensionFilesAsync)(projectRoot);\n    }\n  }\n\n  const startOptions = profileMethod(parseStartOptions)(options, exp);\n\n  await profileMethod(Project.startAsync)(rootPath, { ...startOptions, exp });\n\n  // Send to option...\n  const url = await profileMethod(\n    UrlUtils.constructDeepLinkAsync,\n    'UrlUtils.constructDeepLinkAsync'\n  )(projectRoot);\n  const recipient = await profileMethod(sendTo.getRecipient)(options.sendTo);\n  if (recipient) {\n    await sendTo.sendUrlAsync(url, recipient);\n  }\n\n  // Open project on devices.\n  await profileMethod(urlOpts.handleMobileOptsAsync)(projectRoot, options);\n\n  // Present the Terminal UI.\n  const isTerminalUIEnabled = !options.nonInteractive && !exp.isDetached;\n\n  if (isTerminalUIEnabled) {\n    await profileMethod(TerminalUI.startAsync, 'TerminalUI.startAsync')(projectRoot, startOptions);\n  } else {\n    if (!exp.isDetached) {\n      Log.newLine();\n      urlOpts.printQRCode(url);\n    }\n    Log.log(`Your native app is running at ${chalk.underline(url)}`);\n  }\n\n  // Final note about closing the server.\n  if (!options.webOnly) {\n    Log.nested(`Logs for your project will appear below. ${chalk.dim(`Press Ctrl+C to exit.`)}`);\n  } else {\n    Log.nested(\n      `\\nLogs for your project will appear in the browser console. ${chalk.dim(\n        `Press Ctrl+C to exit.`\n      )}`\n    );\n  }\n  if (options.devClient) {\n    UnifiedAnalytics.logEvent('dev client start command', {\n      status: 'ready',\n      ...getDevClientProperties(projectRoot, exp),\n    });\n  }\n}\n\nfunction track(projectRoot: string, exp: ExpoConfig) {\n  UnifiedAnalytics.logEvent('dev client start command', {\n    status: 'started',\n    platform: 'ios',\n    ...getDevClientProperties(projectRoot, exp),\n  });\n  installCustomExitHook(() => {\n    UnifiedAnalytics.logEvent('dev client start command', {\n      status: 'finished',\n      ...getDevClientProperties(projectRoot, exp),\n    });\n    UnifiedAnalytics.flush();\n  });\n}\n\nexport default (program: any) => {\n  program\n    .command('start [path]')\n    .alias('r')\n    .description('Start a local dev server for the app')\n    .helpGroup('core')\n    .option('-s, --send-to [dest]', 'An email address to send a link to')\n    .option('-c, --clear', 'Clear the Metro bundler cache')\n    // TODO(anp) set a default for this dynamically based on whether we're inside a container?\n    .option('--max-workers [num]', 'Maximum number of tasks to allow Metro to spawn.')\n    .option('--dev', 'Turn development mode on')\n    .option('--no-dev', 'Turn development mode off')\n    .option('--minify', 'Minify code')\n    .option('--no-minify', 'Do not minify code')\n    .option('--https', 'To start webpack with https protocol')\n    .option('--no-https', 'To start webpack with http protocol')\n    .urlOpts()\n    .allowOffline()\n    .asyncActionProjectDir(\n      async (projectRoot: string, options: RawStartOptions): Promise<void> => {\n        const normalizedOptions = await normalizeOptionsAsync(projectRoot, options);\n        return await action(projectRoot, normalizedOptions);\n      }\n    );\n\n  program\n    .command('start:web [path]')\n    .alias('web')\n    .description('Start a Webpack dev server for the web app')\n    .helpGroup('core')\n    .option('--dev', 'Turn development mode on')\n    .option('--no-dev', 'Turn development mode off')\n    .option('--minify', 'Minify code')\n    .option('--no-minify', 'Do not minify code')\n    .option('--https', 'To start webpack with https protocol')\n    .option('--no-https', 'To start webpack with http protocol')\n    .option('-s, --send-to [dest]', 'An email address to send a link to')\n    .urlOpts()\n    .allowOffline()\n    .asyncActionProjectDir(\n      async (projectRoot: string, options: RawStartOptions): Promise<void> => {\n        const normalizedOptions = await normalizeOptionsAsync(projectRoot, {\n          ...options,\n          webOnly: true,\n        });\n        return await action(projectRoot, normalizedOptions);\n      }\n    );\n};\n"],"file":"start.js"}