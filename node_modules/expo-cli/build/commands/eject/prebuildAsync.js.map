{"version":3,"sources":["../../../src/commands/eject/prebuildAsync.ts"],"names":["prebuildAsync","projectRoot","platforms","options","exp","pkg","tempDir","temporary","directory","hasNewProjectFiles","needsPodInstall","hasNewDependencies","template","undefined","skipDependencyUpdate","shouldInstall","install","packageManager","CreateApp","resolvePackageManager","npm","yarn","clean","configSyncingStep","logNewSection","Log","isDebug","stop","managedConfig","WarningAggregator","hasWarningsAndroid","hasWarningsIOS","stopAndPersist","symbol","text","chalk","yellow","succeed","podsInstalled","includes","installCocoaPodsAsync","debug","sdkVersion","Object","keys","_internal","pluginHistory","nodeInstall","podInstall","legacyUpdates","hasAssetBundlePatterns","hasOwnProperty"],"mappings":"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","sourcesContent":["import { ModPlatform, WarningAggregator } from '@expo/config-plugins';\nimport chalk from 'chalk';\nimport temporary from 'tempy';\n\nimport Log from '../../log';\nimport * as CreateApp from '../utils/CreateApp';\nimport { usesOldExpoUpdatesAsync } from '../utils/ProjectUtils';\nimport { logConfigWarningsAndroid, logConfigWarningsIOS } from '../utils/logConfigWarnings';\nimport configureProjectAsync from './configureProjectAsync';\nimport { createNativeProjectsFromTemplateAsync } from './createNativeProjectsFromTemplateAsync';\nimport { ensureConfigAsync } from './ensureConfigAsync';\nimport { installNodeDependenciesAsync } from './installNodeDependenciesAsync';\nimport { assertPlatforms, ensureValidPlatforms } from './platformOptions';\nimport { resolveTemplateOption } from './resolveTemplate';\nimport { warnIfDependenciesRequireAdditionalSetup } from './setupWarnings';\n\nexport type EjectAsyncOptions = {\n  verbose?: boolean;\n  force?: boolean;\n  template?: string;\n  install?: boolean;\n  packageManager?: 'npm' | 'yarn';\n  platforms: ModPlatform[];\n  skipDependencyUpdate?: string[];\n};\n\nexport type PrebuildResults = {\n  hasAssetBundlePatterns: boolean;\n  legacyUpdates: boolean;\n  hasNewProjectFiles: boolean;\n  platforms: ModPlatform[];\n  podInstall: boolean;\n  nodeInstall: boolean;\n  packageManager: string;\n};\n\n/**\n * Entry point into the prebuild process, delegates to other helpers to perform various steps.\n *\n * 1. Create native projects (ios, android)\n * 2. Install node modules\n * 3. Apply config to native projects\n * 4. Install CocoaPods\n */\nexport async function prebuildAsync(\n  projectRoot: string,\n  { platforms, ...options }: EjectAsyncOptions\n): Promise<PrebuildResults> {\n  platforms = ensureValidPlatforms(platforms);\n  assertPlatforms(platforms);\n\n  const { exp, pkg } = await ensureConfigAsync({ projectRoot, platforms });\n  const tempDir = temporary.directory();\n\n  const {\n    hasNewProjectFiles,\n    needsPodInstall,\n    hasNewDependencies,\n  } = await createNativeProjectsFromTemplateAsync({\n    projectRoot,\n    exp,\n    pkg,\n    template: options.template != null ? resolveTemplateOption(options.template) : undefined,\n    tempDir,\n    platforms,\n    skipDependencyUpdate: options.skipDependencyUpdate,\n  });\n\n  // Install node modules\n  const shouldInstall = options?.install !== false;\n\n  const packageManager = CreateApp.resolvePackageManager({\n    install: shouldInstall,\n    npm: options?.packageManager === 'npm',\n    yarn: options?.packageManager === 'yarn',\n  });\n\n  if (shouldInstall) {\n    await installNodeDependenciesAsync(projectRoot, packageManager, {\n      // We delete the dependencies when new ones are added because native packages are more fragile.\n      // npm doesn't work well so we always run the cleaning step when npm is used in favor of yarn.\n      clean: hasNewDependencies || packageManager === 'npm',\n    });\n  }\n\n  // Apply Expo config to native projects\n  const configSyncingStep = CreateApp.logNewSection('Config syncing');\n  // Prevent the spinner from clashing with the debug traces\n  if (Log.isDebug) {\n    configSyncingStep.stop();\n  }\n  const managedConfig = await configureProjectAsync({\n    projectRoot,\n    platforms,\n  });\n  if (WarningAggregator.hasWarningsAndroid() || WarningAggregator.hasWarningsIOS()) {\n    configSyncingStep.stopAndPersist({\n      symbol: '⚠️ ',\n      text: chalk.yellow('Config synced with warnings that should be fixed:'),\n    });\n    logConfigWarningsAndroid();\n    logConfigWarningsIOS();\n  } else {\n    configSyncingStep.succeed('Config synced');\n  }\n\n  // Install CocoaPods\n  let podsInstalled: boolean = false;\n  // err towards running pod install less because it's slow and users can easily run npx pod-install afterwards.\n  if (platforms.includes('ios') && shouldInstall && needsPodInstall) {\n    podsInstalled = await CreateApp.installCocoaPodsAsync(projectRoot);\n  } else {\n    Log.debug('Skipped pod install');\n  }\n\n  warnIfDependenciesRequireAdditionalSetup(\n    pkg,\n    exp.sdkVersion,\n    Object.keys(managedConfig._internal?.pluginHistory ?? {})\n  );\n\n  return {\n    packageManager,\n    nodeInstall: options.install === false,\n    podInstall: !podsInstalled,\n    legacyUpdates: await usesOldExpoUpdatesAsync(projectRoot),\n    platforms,\n    hasNewProjectFiles,\n    hasAssetBundlePatterns: exp.hasOwnProperty('assetBundlePatterns'),\n  };\n}\n"],"file":"prebuildAsync.js"}